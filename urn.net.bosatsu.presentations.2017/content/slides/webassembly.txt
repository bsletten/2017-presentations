name: inverse
layout: true
class: center, middle, inverse
---
#WebAssembly

$a{res:/bosatsu/data/snippets/qualifications.txt}
---
layout: false
.left-column[
  ## Agenda
]
.right-column[
- Introduction
- Emscripten
- WebAssembly
- Future
]

---
name: Introduction
class: center, middle, inverse
# Introduction

---
class: center, middle, inverse

.quotation[WebAssembly or wasm is a new portable, size- and load-time-efficient format suitable for compilation to the web.]
.quotation-source[
Source: [http://webassembly.org](http://webassembly.org)]

---
class: center, middle
##[http://webassembly.org/demo/AngryBots/](http://webassembly.org/demo/AngryBots/)

---
name: Emscripten
class: center, middle, inverse
# Emscripten

---
#What is it?
- Open Source LLVM to Javascript compiler

--
- Compile C/C++ into Javascript

--
- Convert any LLVM bitcode output into Javascript

--
- Compile C/C++-based runtimes into Javascript (Python/Lua)

---
class: center, middle, inverse

.quotation[Emscripten makes native code immediately available on the Web: a platform that is standards-based, has numerous independent compatible implementations, and runs everywhere from PCs to iPads.]
.quotation-source[
Source: [http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html](http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html)]

---
class: center, middle, inverse

.quotation[With Emscripten, C/C++ developers don’t have the high cost of porting code manually to JavaScript — or having to learn JavaScript at all. Web developers also benefit, as they can use the many thousands of pre-existing native utilities and libraries in their sites.]
.quotation-source[
Source: [http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html](http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html)]

---
#Hello, World!
```c
#include <stdio.h>

int main() {
  printf("hello, world!\n");
  return 0;
}
```

--

```bash
$ ./emcc hello.c
```

--

```bash
$ node a.out.js
hello, world!
```
---
class: center

# Any Modern Browser

<img src="/bosatsu/data/images/webassembly/hello_world.png">

---
#File I/O
```c
#include <stdio.h>
int main() {
  FILE *file = fopen("tests/hello_world_file.txt", "rb");
  if (!file) {
    printf("cannot open file\n");
    return 1;
  }
  while (!feof(file)) {
    char c = fgetc(file);
    if (c != EOF) {
      putchar(c);
    }
  }
  fclose (file);
  return 0;
}
```

--

```bash
$ ./emcc tests/hello_world_file.cpp -o hello.html
```

---
class: center

# No Preload of Files

<img src="/bosatsu/data/images/webassembly/hello_world_text_1.png">

---
class: center

```bash
$ ./emcc tests/hello_world_file.cpp -o hello.html --preload-file tests/hello_world_file.txt
```

--

<img src="/bosatsu/data/images/webassembly/hello_world_text_2.png">

---
class: center

<img src="/bosatsu/data/images/webassembly/hello_gl_world.png">


---
name: WebAssembly
class: center, middle, inverse
# WebAssembly

---
# Efficient and fast

- Stack machine

--

- Size and load-time efficient binary format

--

- Portable with near native execution speeds

---
# Safe

- Sandboxed execution environment

--

- Enforce same-origin and browser security policies

---
# Open

- Easy to read textual format

--

- Supports debugging, testing, optimizations, experiments

---
# Part of the Web

- Maintains versionless, feature-tested, backwards-compatibility of the Web

--

- Modules can interact with Javascript context and browser functionality

--

- Also supports non-web embeddings


---
#Building Emscripten w/ WebAssembly Support
```bash
$ git clone https://github.com/juj/emsdk.git
$ cd emsdk
$ ./emsdk install sdk-incoming-64bit binaryen-master-64bit
$ ./emsdk activate sdk-incoming-64bit binaryen-master-64bit
```

--

```bash
$ source ./emsdk_env.sh
Adding directories to PATH:
PATH += /Users/brian/git-others/emsdk/emsdk
PATH += /Users/brian/git-others/emsdk/emsdk/clang/fastcomp/build_incoming_64/bin
PATH += /Users/brian/git-others/emsdk/emsdk/node/4.1.1_64bit/bin
PATH += /Users/brian/git-others/emsdk/emsdk/emscripten/incoming

Setting environment variables:
EMSDK = /Users/brian/git-others/emsdk/emsdk
EM_CONFIG = /Users/brian/.emscripten
EMSCRIPTEN = /Users/brian/git-others/emsdk/emsdk/emscripten/incoming
```

---
#Testing the Build
```bash
$ emcc -v
WARNING:root:(Emscripten: system change: 1.37.3|/Users/brian/git-others/emsdk/emsdk/clang/fastcomp/build_incoming_64/bin|3.9 vs 1.37.0|/Users/brian/git-others/emsdk/emsdk/clang/fastcomp/build_incoming_64/bin|3.9, clearing cache)
INFO:root:(Emscripten: Running sanity checks)
emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 1.37.3
clang version 3.9.0 (https://github.com/kripken/emscripten-fastcomp-clang/ 5725e3dd8325570ac9d92924fb1af5db9e879e58) (https://github.com/kripken/emscripten-fastcomp/ 9735be7b8bee9c207f33244fe3c5f85f45094470) (emscripten 1.37.3 : 1.37.3)
Target: x86_64-apple-darwin16.4.0
Thread model: posix
InstalledDir: /Users/brian/git-others/emsdk/emsdk/clang/fastcomp/build_incoming_64/bin
INFO:root:(Emscripten: Running sanity checks)
```

---
#Hello, World!
```c
#include <stdio.h>

int main() {
  printf("hello, world!\n");
  return 0;
}
```

---
#Compiling to WASM/HTML
```bash
$ emcc hello.c -s WASM=1 -o hello.html
$ ls -alF
total 960
drwxr-xr-x   7 brian  staff     238 Feb 19 17:05 ./
drwxr-xr-x  15 brian  staff     510 Feb 19 17:05 ../
-rw-r--r--   1 brian  staff  235507 Feb 19 17:05 hello.asm.js
-rw-r--r--   1 brian  staff      76 Feb 19 17:05 hello.c
-rw-r--r--   1 brian  staff  103079 Feb 19 17:05 hello.html
-rw-r--r--   1 brian  staff   90634 Feb 19 17:05 hello.js
-rw-r--r--   1 brian  staff   47496 Feb 19 17:05 hello.wasm
```

--

```bash
$ emrun --no_browser --port 10000 .
Web server root directory: /Users/brian/src/emscripten/wasm
Now listening at http://localhost:10000/
The html page you are running is not emrun-capable. Stdout, stderr and exit(returncode) capture will not work. Recompile the application with the --emrun linker flag to enable this, or pass --no_emrun_detect to emrun to hide this check.
```

---
class: center

# WebAssembly-Enabled Browser

<img src="/bosatsu/data/images/webassembly/hello_world_wasm.png">

---
name: Future
class: center, middle, inverse
# Future

$a{res:/bosatsu/data/snippets/questions.txt}