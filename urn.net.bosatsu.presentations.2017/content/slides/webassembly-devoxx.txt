name: inverse
layout: true
class: center, middle, inverse
---
#WebAssembly

$a{res:/bosatsu/data/snippets/qualifications.txt}
---
layout: false
.left-column[
  ## Agenda
]
.right-column[
- Introduction

- Emscripten

- WebAssembly

- Future
]

---
name: WebAssembly-Introduction
class: center, middle, inverse
# Introduction

---
name: WebAssembly-Introduction
class: center, middle
## Web Development vs Software Development

---
class: center

<img src="/bosatsu/data/images/webassembly/lin-clark-1.png">

Source: https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly

---
class: center

<img src="/bosatsu/data/images/webassembly/lin-clark-2.png">

Source: https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly

---
class: center, middle
##[https://webrtc.github.io/samples](https://webrtc.github.io/samples/src/content/getusermedia/filter/)

---
class: center, middle
##[https://www.cubeslam.com](https://www.cubeslam.com)

---
class: center, middle
##[https://webtorrent.io](https://webtorrent.io)

---
class: center, middle, inverse

.quotation[WebAssembly or wasm is a new portable, size- and load-time-efficient format suitable for compilation to the web.]
.quotation-source[
Source: [http://webassembly.org](http://webassembly.org)]

---
class: center, middle
##[Qt Wiggly](http://vps2.etotheipiplusone.com:30176/redmine/emscripten-qt-examples/wiggly.html)

---
class: center, middle
##[Qt Animated Tiles](http://vps2.etotheipiplusone.com:30176/redmine/emscripten-qt-examples/animatedtiles.html)


---
class: center, middle
##[http://webassembly.org/demo/](http://webassembly.org/demo/)

---
class: center, middle
##[http://lukewagner.github.io/AngryBotsPacked/](http://lukewagner.github.io/AngryBotsPacked/)

---
class: center, middle
##[http://lukewagner.github.io/PlatformerGamePacked/](http://lukewagner.github.io/PlatformerGamePacked/)

---
name: WebAssembly-Emscripten
class: center, middle, inverse
# Emscripten

---
#What is it?

--
- Open Source LLVM to Javascript compiler

--
- Compile C/C++ into Javascript

--
- Convert any LLVM bitcode output into Javascript

--
- Compile C/C++-based runtimes into Javascript (Python/Lua)

---
#Why is it?

--
- JavaScript engines are fast and getting faster

--
- People are familiar with other tools and languages

--
- JavaScript kind of sucks

--
- Code is compiled into LLVM bitcode which unlocks further optimizations

---
class: center, middle
##[Compiling other languages to JS](https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS)

---
class: center, middle, inverse

.quotation[Emscripten makes native code immediately available on the Web: a platform that is standards-based, has numerous independent compatible implementations, and runs everywhere from PCs to iPads.]
.quotation-source[
Source: [http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html](http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html)]

---
class: center, middle, inverse

.quotation[With Emscripten, C/C++ developers don’t have the high cost of porting code manually to JavaScript — or having to learn JavaScript at all. Web developers also benefit, as they can use the many thousands of pre-existing native utilities and libraries in their sites.]
.quotation-source[
Source: [http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html](http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html)]

---
#Hello, World!
```c
#include <stdio.h>

int main() {
  printf("hello, world!\n");
  return 0;
}
```

--

```bash
$ ./emcc hello.c
```
--

```bash
$ node a.out.js
hello, world!
```


---
class: center

# Any Modern Browser

<img src="/bosatsu/data/images/webassembly/hello_world.png">

---
class: center

<img src="/bosatsu/data/images/webassembly/hello_gl_world.png">


---
name: WebAssembly-WebAssembly
class: center, middle, inverse
# WebAssembly

---
# Efficient and fast

- Stack machine

--

- Size and load-time efficient binary format

--

- Portable with near native execution speeds

---
# Safe

- Sandboxed execution environment

--

- Enforce same-origin and browser security policies

---
# Open

- Easy to read textual format

--

- Supports debugging, testing, optimizations, experiments

---
# Part of the Web

- Maintains versionless, feature-tested, backwards-compatibility of the Web

--

- Modules can interact with Javascript context and browser functionality

--

- Also supports non-web embeddings

---
# Binary Format

--
- Gzipped source code compresses very nicely

--
- Experiments demonstrated a 20-30% size reduction of a binary format vs asm.js code

--
- Parse times of names is slower than binary indices

--
- Further optimizations are possible

---
# Binary Layering

--

.footnote[.red[*] Future feature]

- Layer 0: Simple binary encoding of bytecode and data structures

--
- Layer 1: Structural compression layer .red[*]

--
- Layer 2: General compression .red[*]

---
#WAST

.footnote[.red[https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format] ]

--
```lisp
(module)
```

--
```asm
0000000: 0061 736d ; WASM_BINARY_MAGIC
0000004: 0d00 0000 ; WASM_BINARY_VERSION
```

--
```lisp
( func <signature> <locals> <body> )
```

---
#Parameters and Variables
```lisp
(func (param i32) (param f32) (local f64)
  get_local 0
  get_local 1
  get_local 2)
```

--
```lisp
(func (param $p1 i32) (param $p2 f32) (local $loc f64)
  get_local $p1
  get_local $p2
  get_local $loc )
```

---
#Stack Machine
.footnote[.red[https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format] ]

```lisp
(module
  (func $add (param $lhs i32) (param $rhs i32) (result i32)
    get_local $lhs
    get_local $rhs
    i32.add)
  (export "add" (func $add))
)
```

---
#Invoking WASM Function From Javascript
.footnote[.red[https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format] ]

```javascript
fetchAndInstantiate('add.wasm').then(function(instance) {
   console.log(instance.exports.add(1, 2));  // "3"
});

// fetchAndInstantiate() found in wasm-utils.js
function fetchAndInstantiate(url, importObject) {
  return fetch(url).then(response =>
    response.arrayBuffer()
  ).then(bytes =>
    WebAssembly.instantiate(bytes, importObject)
  ).then(results =>
    results.instance
  );
}
```

---
class: center, middle

## [https://mbebenita.github.io/WasmExplorer/](https://mbebenita.github.io/WasmExplorer/)

---
class: center, middle

## [https://wasdk.github.io/WasmFiddle/](https://wasdk.github.io/WasmFiddle/)

---
class: center, middle
##[http://webassembly.org/docs/mvp/](http://webassembly.org/docs/mvp/)

---
class: center, middle
##[http://webassembly.org/docs/use-cases/](http://webassembly.org/docs/use-cases/)

---
#Building Emscripten w/ WebAssembly Support
```bash
$ git clone https://github.com/juj/emsdk.git
$ cd emsdk
$ ./emsdk install sdk-incoming-64bit binaryen-master-64bit
$ ./emsdk activate sdk-incoming-64bit binaryen-master-64bit
```

--

```bash
$ source ./emsdk_env.sh
Adding directories to PATH:
PATH += /Users/brian/git-others/emsdk/emsdk
PATH += /Users/brian/git-others/emsdk/emsdk/clang/fastcomp/build_incoming_64/bin
PATH += /Users/brian/git-others/emsdk/emsdk/node/4.1.1_64bit/bin
PATH += /Users/brian/git-others/emsdk/emsdk/emscripten/incoming

Setting environment variables:
EMSDK = /Users/brian/git-others/emsdk/emsdk
EM_CONFIG = /Users/brian/.emscripten
EMSCRIPTEN = /Users/brian/git-others/emsdk/emsdk/emscripten/incoming
```
---
#Hello, World!
```c
#include <stdio.h>

int main() {
  printf("hello, world!\n");
  return 0;
}
```

---
#Compiling to WASM/HTML
```bash
$ emcc hello.c -s WASM=1 -o hello.html
$ ls -alF
total 960
drwxr-xr-x   7 brian  staff     238 Feb 19 17:05 ./
drwxr-xr-x  15 brian  staff     510 Feb 19 17:05 ../
-rw-r--r--   1 brian  staff  235507 Feb 19 17:05 hello.asm.js
-rw-r--r--   1 brian  staff      76 Feb 19 17:05 hello.c
-rw-r--r--   1 brian  staff  103079 Feb 19 17:05 hello.html
-rw-r--r--   1 brian  staff   90634 Feb 19 17:05 hello.js
-rw-r--r--   1 brian  staff   47496 Feb 19 17:05 hello.wasm
```

--

```bash
$ emrun --no_browser --port 10000 .
Web server root directory: /Users/brian/src/emscripten/wasm
Now listening at http://localhost:10000/
The html page you are running is not emrun-capable. Stdout, stderr and exit(returncode) capture will not work. Recompile the application with the --emrun linker flag to enable this, or pass --no_emrun_detect to emrun to hide this check.
```

---
class: center

# WebAssembly-Enabled Browser

<img src="/bosatsu/data/images/webassembly/hello_world_wasm.png">

---
class: center, middle
##[https://takahirox.github.io/WebAssembly-benchmark/](https://takahirox.github.io/WebAssembly-benchmark/)

---
class: center, middle

## [WASMSobel](file:///Users/brian/git-others/WASMSobel/index.html)

---
class: center, middle
##[https://mil-tokyo.github.io/webdnn/](https://mil-tokyo.github.io/webdnn/)

---
name: WebAssembly-Future
class: center, middle, inverse
# Future

---
class: center, middle

## https://wasm.news

---
class: center, middle

## https://hacks.mozilla.org/2017/02/where-is-webassembly-now-and-whats-next/

---
class: center, middle

## [http://learningthreejs.com/blog/2013/04/30/closing-the-gap-between-html-and-webgl/](http://learningthreejs.com/blog/2013/04/30/closing-the-gap-between-html-and-webgl/)


$a{res:/bosatsu/data/snippets/questions.txt}
