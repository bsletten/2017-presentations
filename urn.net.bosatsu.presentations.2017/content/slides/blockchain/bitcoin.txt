---
# Bitcoin

--
* Introduced in 2008 by Satoshi Nakamoto

--
* Provided a white paper and working code

--
* Built on previous cryptocurrency ideas with several clever new tweaks

--
* Built on ideas of Chaum, Dwork, Naor, Szabo and Back

--
* Solves problems of centralization, double-spending, identity, scarcity, consensus and more

--
* No special role for merchants

--
* Allows user-to-user payment

---
class: center, middle

# Who is Satoshi Nakamoto?

--
<img src="/bosatsu/data/images/blockchain/iggy-shrug.jpg"/>

---
# What is Bitcoin?

--
* A protocol establishing a decentralized peer-to-peer network

--
* A public transaction ledger

--
* A rule base for validating transactions

--
* A mechanism for achieving consensus

--
* An economic system that rewards participation

---
# Who is involved with Bitcoin?

--
* Satoshi

--
* Core Developers

--
* Miners

--
* Investors

--
* Merchants

--
* Customers

--
* Payment Services

---
class: center, middle

<img style="height: 300px;" src="/bosatsu/data/images/blockchain/consensus.png"/>

.footnote["Bitcoin and Cryptocurrency Technologies: A Comprehensive Introduction"]

???

Consensus on rules and history are linked. Without knowing which blocks are valid you can't reach consensus on what is in the blockchain. Without consensus of what is in the blockchain, you cannot determine what is a valid transaction. Consensus on history means agreement on who owns what.

---
# Managing Your Bitcoin

--
* You establish ownership over your bitcoin with

--
 * Cryptographic keys

--
 * Bitcoin addresses

--
 * Digital signatures

--
* Public keys allow receipt of bitcoin

--
* Private keys allow spending of bitcoin

--
* Wallets are used to store private keys

--
* Public keys can be generated from private keys

--
* Keys are generated in wallets offline

--
* They are not stored on the blockchain

--
* Keys sign transactions

--
* Control the key, control the coins

---
# Bitcoin Private Keyspace

--
* Random 256-bit number

## `$$2^{256} \text{ combinations }$$`

--
## `$$10^{80} \text{ atoms in the universe} $$`

--
* Everything comes down to the random number generator

---
```text
> bitcoin-cli getnewaddress
1E7S6Kq9iZSgS7zVBe745mM6GntqEG64S8
```

--

.center[<img style="height: 500px;" src="/bosatsu/data/images/blockchain/base58.png"/>

.footnote[Mastering Bitcoin]
]

---
```text
> bitcoin-cli validateaddress 1E7S6Kq9iZSgS7zVBe745mM6GntqEG64S8
{
  "isvalid": true,
  "address": "1E7S6Kq9iZSgS7zVBe745mM6GntqEG64S8",
  "scriptPubKey": "76a9148fd1139858f95a7e2fd2ea61c2177f594ec9397988ac",
  "ismine": true,
  "iswatchonly": false,
  "isscript": false,
  "pubkey": "029f9418d4ca7b88b8e2006aa5b35af17b6651af10db671117a52d30cfd2e8fb51",
  "iscompressed": true,
  "account": "",
  "timestamp": 1510425051,
  "hdkeypath": "m/0'/0'/3'",
  "hdmasterkeyid": "69f93ed03a9a529a9e90d789acb449b3c13c5d44"
}
```

---

.center[<img style="height: 500px;" src="/bosatsu/data/images/blockchain/compressed-pk.png"/>

.footnote[Mastering Bitcoin]
]

---
```text
> bitcoin-cli dumpprivkey 1E7S6Kq9iZSgS7zVBe745mM6GntqEG64S8
Kzd3Gjs5WSqPt9EG5W56SAwDG7X8JFMwb6E4BP8rzHbVAU2Zu3fR

```

--
* BIP-38 Encrypted Keys with Passphrase

--
* Paper wallet

--
* Hardware wallet

--
* Brain wallet

--
.center[## http://bitadress.org]

---
# Consensus

--
* No centralized party, consensus is emergent

--
* Bitcoin protocols control the mining process algorithmically

--
* Miners validate transactions

--
* Thousands of miners simultaneously attempt to find a solution to a puzzle

--
* On average, every 10 minutes one succeeds

--
* It's validated collection of transactions get added to the block chain and linked to the previous block (usually based upon transaction fees)

--
* Longest chain is chosen (most difficulty handled) to connect the new block to

--
* Difficulty of the puzzle adjusts every two weeks

---
# Bitcoin Nodes

--
* A node provides one or more services

--
 * Routing

--
 * Storing the blockchain

--
 * Mining

--
 * Wallet management

--
* Simplified payment verification (SPV) nodes only verify transactions

--
* Other nodes exist running specialized protocols

--
* Query DNS seeds when they first start

--
* Keeps track of nodes coming and going

--
* Broadcast transactions

--
* Full nodes keep track of the entire blockchain and can independently verify any transaction

--
* Nodes originally used plaintext communication

--
* Now support Tor connections and node authentication and encryption

--
* Mostly important for SPV nodes

---
class: center, middle

<img style="height: 500px;" src="/bosatsu/data/images/blockchain/network.png"/>

.footnote[Mastering Bitcoin]

---
# Keeping track of transactions

--
* Most nodes maintain transaction and orphan pools in memory

--
* Some maintain pools of unspent outputs

--
* Listen for updates

---
# Transaction

```javascript
{
   "version":1,
   "locktime":0,
   "vin":[
      {
         "txid":"7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18",
         "vout":0,
         "scriptSig":"3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf",
         "sequence":4294967295
      }
   ],
   "vout":[
      {
         "value":0.01500000,
         "scriptPubKey":"OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG"
      },
      {
         "value":0.08450000,
         "scriptPubKey":"OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG"
      }
   ]
}
```




---
background-image: url(/bosatsu/data/images/blockchain/dice.jpg)
layout: false
class: middle

.footnote[.white[[CC BY-ND 2.0](https://www.flickr.com/photos/amyashcraft/2359434806)]]

---
```python
// Example from "Mastering Bitcoin"
> python
Python 2.7.13 (default, Apr  4 2017, 08:47:57)
[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.38)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import hashlib
>>> print hashlib.sha256("I am Satoshi Nakamoto").hexdigest()
5d7c7ba21cbbcd75d14800b100252d5b428e5b1213d27c385bc141ca6b47989e
```

--
```python
>>> print hashlib.sha256("I am Satoshi Nakamoto0").hexdigest()
a80a81401765c8eddee25df36728d732acb6d135bcdee6c2f87a3784279cfaed
>>> print hashlib.sha256("I am Satoshi Nakamoto1").hexdigest()
f7bc9a6304a4647bb41241a677b5345fe3cd30db882c8281cf24fbb7645b6240
```

---
```python
>>> for nonce in xrange(20):
...     input = text + str(nonce)
...     hash = hashlib.sha256(input).hexdigest()
...     print input, '=>', hash
```

--
```python
I am Satoshi Nakamoto0 => a80a81401765c8eddee25df36728d732acb6d135bcdee6c2f87a3784279cfaed
I am Satoshi Nakamoto1 => f7bc9a6304a4647bb41241a677b5345fe3cd30db882c8281cf24fbb7645b6240
I am Satoshi Nakamoto2 => ea758a8134b115298a1583ffb80ae62939a2d086273ef5a7b14fbfe7fb8a799e
I am Satoshi Nakamoto3 => bfa9779618ff072c903d773de30c99bd6e2fd70bb8f2cbb929400e0976a5c6f4
I am Satoshi Nakamoto4 => bce8564de9a83c18c31944a66bde992ff1a77513f888e91c185bd08ab9c831d5
I am Satoshi Nakamoto5 => eb362c3cf3479be0a97a20163589038e4dbead49f915e96e8f983f99efa3ef0a
I am Satoshi Nakamoto6 => 4a2fd48e3be420d0d28e202360cfbaba410beddeebb8ec07a669cd8928a8ba0e
I am Satoshi Nakamoto7 => 790b5a1349a5f2b909bf74d0d166b17a333c7fd80c0f0eeabf29c4564ada8351
I am Satoshi Nakamoto8 => 702c45e5b15aa54b625d68dd947f1597b1fa571d00ac6c3dedfa499f425e7369
I am Satoshi Nakamoto9 => 7007cf7dd40f5e933cd89fff5b791ff0614d9c6017fbe831d63d392583564f74
I am Satoshi Nakamoto10 => c2f38c81992f4614206a21537bd634af717896430ff1de6fc1ee44a949737705
I am Satoshi Nakamoto11 => 7045da6ed8a914690f087690e1e8d662cf9e56f76b445d9dc99c68354c83c102
I am Satoshi Nakamoto12 => 60f01db30c1a0d4cbce2b4b22e88b9b93f58f10555a8f0f4f5da97c3926981c0
I am Satoshi Nakamoto13 => 0ebc56d59a34f5082aaef3d66b37a661696c2b618e62432727216ba9531041a5
I am Satoshi Nakamoto14 => 27ead1ca85da66981fd9da01a8c6816f54cfa0d4834e68a3e2a5477e865164c4
I am Satoshi Nakamoto15 => 394809fb809c5f83ce97ab554a2812cd901d3b164ae93492d5718e15006b1db2
I am Satoshi Nakamoto16 => 8fa4992219df33f50834465d30474298a7d5ec7c7418e642ba6eae6a7b3785b7
I am Satoshi Nakamoto17 => dca9b8b4f8d8e1521fa4eaa46f4f0cdf9ae0e6939477e1c6d89442b121b8a58e
I am Satoshi Nakamoto18 => 9989a401b2a3a318b01e9ca9a22b0f39d82e48bb51e0d324aaa44ecaba836252
I am Satoshi Nakamoto19 => cda56022ecb5b67b2bc93a2d764e75fc6ec6e6e79ff6c39e21d03b45aa5b303a
```

---
# Proof of Work

--
* 1 out of 16 hashes should begin with '0' with an even distribution of outputs

--
* Set a target of finding a hash less than 0x1000000000000000000000000000000000000000000000000000000000000000

--
* Increase the difficulty by setting a new target of 0x0100000000000000000000000000000000000000000000000000000000000000

---
class: center, middle

<img style="height: 400px;" src="/bosatsu/data/images/blockchain/difficulty.png"/>

.footnote[https://blockchain.info/charts/difficulty?timespan=all]

---
# Should you mine?

--
* High-end CPU might get you 20,000,000 H/s

--
 * Several hundred thousand years to find a solution

--
* GPUs can get you 200,000,000 H/s

--
 * Hundreds of years to find a solution

--
* Run them in parallel, but they generate heat and are more optimized for floating point numbers

--
* Availability of a Verilog design for Bitcoin mining offered FPGA solutions

--
 * Better use of transistors, ran cooler, good at bit twiddling

--
 * Offered 1,000,000,000 H/s

--
 * Chaining 100 of these would allow you to find a solution... in 100 years

--
* Application-specific integrated circuits (ASICs)

---
class: center, middle

<img style="height: 400px;" src="/bosatsu/data/images/blockchain/bitfury.png"/>

.footnote[Marco Krohn]


---
class: center, middle

<img style="height: 400px;" src="/bosatsu/data/images/blockchain/hashrate.png"/>

.footnote[https://blockchain.info/charts/hash-rate?timespan=all]

---

# Mining

--
* Race to find a hash of a block that is less than the current difficulty level

--
* Block is constructed to include a CoinBase transaction

--
* Other transactions are assembled into the block usually based upon fees

--
* Fees are the difference between inputs and outputs

--
* Miners profit upon winning the round from CoinBase + Fees

--
* After all coins are mined, it will just be transaction fees

--
* Payment to miners is not the point

--
* Security and validation of the blockchain is the point

---
class: center, middle

# https://bitcoinfees.earn.com

---
# CoinBase transaction

```javascript
{
   "hex":"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0f03443b0403858402062f503253482fffffffff0110c08d9500000000232102aa970c592640d19de03ff6f329d6fd2eecb023263b9ba5d1b81c29b523da8b21ac00000000",
   "txid":"d5ada064c6417ca25c4308bd158c34b77e1c0eca2a73cda16c737e7424afba2f",
   "version":1,
   "locktime":0,
   "vin":[
      {
         "coinbase":"03443b0403858402062f503253482f",
         "sequence":4294967295
      }
   ],
   "vout":[
      {
         "value":25.09094928,
         "n":0,
         "scriptPubKey":{
            "asm":"02aa970c592640d19de03ff6f329d6fd2eecb023263b9ba5d1b81c29b523da8b21OP_CHECKSIG",
            "hex":"2102aa970c592640d19de03ff6f329d6fd2eecb023263b9ba5d1b81c29b523da8b21ac",
            "reqSigs":1,
            "type":"pubkey",
            "addresses":[
               "1MxTkeEP2PmHSMze5tUZ1hAV3YTKu2Gh1N"
            ]
         }
      }
   ]
}
```

---
# Transaction Validation

--
* Check syntax and data structure

--
* No empty inputs and outputs

--
* Transaction size (bytes) < maximum block size

--
* Output value is reasonable range and outputs don't already exist elsewhere (already spent)

--
* Inputs are valid and >= outputs

--
* Lock times are reasonable

--
* Number of signature operations are reasonable

--
* Locking/unlocking scripts are safe, standard and validating

--
* Transaction references match to the block or pools

---
class: center, middle

### https://blockchain.info/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f

---
# Script

--
* Bitcoin transaction scripting language

--
* Forth-like reverse-Polish stack-based environment

--
* Turing incomplete for simplicity and to avoid logic bombs

--
* Stateless

--
* Used in locking/unlocking scripts

--
* Designed to be simple and able to run on a wide variety of devices

--
* Supports a variety of scenarios but most are Pay-to-Public-Key-Hash

---
class: center, middle

<img style="height: 250px;" src="/bosatsu/data/images/blockchain/script-1.png"/>

.footnote[Mastering Bitcoin]

---
class: center, middle

<img style="height: 500px;" src="/bosatsu/data/images/blockchain/script-2.png"/>

.footnote[Mastering Bitcoin]

---
class: center, middle

<img style="height: 500px;" src="/bosatsu/data/images/blockchain/script-3.png"/>

.footnote[Mastering Bitcoin]

---
class: center, middle

<img style="height: 500px;" src="/bosatsu/data/images/blockchain/script-4.png"/>

.footnote[Mastering Bitcoin]
