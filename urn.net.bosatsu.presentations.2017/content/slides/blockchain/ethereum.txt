---
class: center, middle, inverse
.quotation[Remember, the Ethereum network is not yet complete. It is operational today, but will not be complete until sometime in 2019.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]

---
class: center, middle, inverse

.quotation[The key component is this idea of a Turing-complete blockchain. … As a data structure, it works kind of the same way that Bitcoin works, except the difference in Ethereum is, it has this built-in programming language.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]

---
class: center, middle, inverse

.quotation[With a radically different perspective to that of the creators of Bitcoin, the Ethereum creators implicitly took the position that cryptocurrency , if it exists in the future, will not be one decentralized system. Instead, it will be a distributed network of decentralized systems, enabling many different cryptographic tokens of value, with various purposes and interpretations to be easily and quickly defined and then brought to life.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]

---
class: center, middle, inverse

.quotation[The Ethereum network functions as one large computer which executes programs in lockstep; it is a machine which is “virtualized” by a network of other machines. Being composed of many private computers, the Ethereum Virtual Machine (EVM) itself can be said to be a shared computer which is ownerless.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]

---
class: center, middle, inverse
.quotation[In Ethereum, as in Bitcoin, the application layer is thinner, at least so far, because the protocol gives you a lot.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]

---
class: center, middle, inverse
.quotation[Blockchain-based apps and services are disruptive not only because of their secure nature, but because of how economical they can be to operate at scale.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]

---
class: center, middle, inverse
.quotation[smart contract: some business logic that runs on the network, semi-autonomously moving value and enforcing payment agreements between parties.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]

---
class: center, middle, inverse
.quotation[All transactions in Ethereum are stored on the blockchain, a canonical history of state changes stored on every single Ethereum node. When you pay for computing time on the Ethereum network, this includes the cost of running the transaction and for storage of the data included in your smart contract.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]


---
class: center, middle, inverse
.quotation[transactions are used to refer to state changes in the distributed database (that is, in the blockchain). Transactions change account balances within the EVM. Messages are data objects passed back and forth across the network between smart contracts, and do not necessarily result in any changes being made on the chain. For example, if one contract checks the balance of another.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]

---
class: center, middle, inverse
.quotation[Transaction senders are required to include a gas limit that says how much they’re willing to pay to have their transaction executed... Whether or not a transaction executes is determined by the amount of gas the sender is willing to pay. If the total number of steps exceeds the gas budgeted for a transaction, all steps are rolled back, and no part of the transaction is executed. If a user sends a transaction with too low a transaction fee, it will be processed only after some time, or not at all.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]

---
class: center, middle

# https://etherconverter.online/

---
class: center, middle

# https://ethstats.net

---
class: center, middle

# https://ethernodes.org

---
class: center, middle

# https://etherlisten.com

---
class: center, middle, inverse
.quotation[The reason these contracts are “smart” is that they’re executed by machine, and the assets (ether or other tokens) are moved automatically. These contracts could be enforced even hundreds of years after they’ve been written, assuming the network is still running then— and even if a lot of bad actors try to interfere.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]

---
class: center, middle, inverse
.quotation[The EVM has its own language, the EVM bytecode, to which your smart contracts compile. Solidity, which is a high-level language, is compiled into bytecode and uploaded onto the Ethereum blockchain by using a client application such as the Mist browser or a full node.]
.quotation-source[Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners]

---
class: center, middle

# https://github.com/ethereum/mist/releases

---
class: center, middle

# https://faucet.rinkeby.io

---
# Solidity Contracts

--
* State variables

--
* Functions

--
* Function modifiers

--
* Events

--
* Struct Types

--
* Enum Types

--
* Mappings

---
# State Variables

```javascript
contract SimpleStorage {
  uint storedData; // State variable
  // ...
}
```

---
# Functions

```javascript
contract SimpleAuction {
  function bid() { // Function
   // ...
  }
}
```

---
# Function Modifiers

```javascript
contract Purchase {
  address public seller;
  modifier onlySeller() { // Modifier
      if (msg.sender != seller) throw;
  }

  function abort() onlySeller { // Modifier usage
      // ...
  }
}
```

---
# Events

```javascript
contract SimpleAuction {
  event HighestBidIncreased(address bidder, uint amount); // Event
  function bid() {
    // ...
    HighestBidIncreased(msg.sender, msg.value); // Triggering event
  }
}
```

---
# Struct Types

```javascript
contract Ballot {
  struct Voter { // Struct
    uint weight;
    bool voted;
    address delegate;
    uint vote;
  }
}
```

---
# Enum Types

```javascript
contract Purchase {
  enum State { Created, Locked, Inactive } // Enum
}
```

---
# Mappings

```javascript
contract Users {
  mapping (bytes32 => address) public users;
  ...
}
```

---
# SimpleStorage

```javascript
contract SimpleStorage {
    uint storedData;
    function set(uint x) {
        storedData = x;
    }
    function get() constant returns (uint retVal) {
        return storedData;
    }
}
```

---
# User Mapping

```javascript
contract Users {
  // Here we store the names. Make it public to automatically generate an
  // accessor function named 'users' that takes a fixed-length string as argument.
  mapping (bytes32 => address) public users;
  // Register the provided name with the caller address.
  // Also, we don't want them to register "" as their name.
  function register(bytes32 name) {
      if(users[name] == 0 && name != ""){
          users[name] = msg.sender;
      }
  }
  // Unregister the provided name with the caller address.
  function unregister(bytes32 name) {
      if(users[name] != 0 && name != ""){
          users[name] = 0x0;
      }
  }
}
```

---
# Custom tokens

```javascript
contract token {
    mapping (address => uint) public coinBalanceOf;
    event CoinTransfer(address sender, address receiver, uint amount);
  /* Initializes contract with initial supply tokens to the creator of the contract */
  function token(uint supply) {
        coinBalanceOf[msg.sender] = supply;
    }
  /* Very simple trade function */
    function sendCoin(address receiver, uint amount) returns(bool sufficient) {
        if (coinBalanceOf[msg.sender] < amount) return false;
        coinBalanceOf[msg.sender] -= amount;
        coinBalanceOf[receiver] += amount;
        CoinTransfer(msg.sender, receiver, amount);
        return true;
    }
}
```

---
class: middle, center

# https://modalduality.org/posts/puppeth/

---
# Truffle

--
```bash
> npm install -g truffle
```

--
```bash
> mkdir simple-storage
> cd simple-storage
```

--
```bash
> truffle init
```

---
# SimpleStorage

```javascript
// contracts/SimpleStorage.sol

pragma solidity ^0.4.0;

contract SimpleStorage {
  uint myVariable;

  function set(uint x) {
    myVariable = x;
  }

  function get() constant returns (uint) {
    return myVariable;
  }
}
```

---
# Migrations

```javascript
// migrations/2_deploy_contracts.js

var SimpleStorage = artifacts.require("SimpleStorage");

module.exports = function(deployer) {
  deployer.deploy(SimpleStorage);
};
```

---

```bash
> truffle compile
Compiling ./contracts/Migrations.sol...
Compiling ./contracts/Store.sol...
```

--
```bash
> truffle develop
Truffle Develop started at http://localhost:9545/

Accounts:
(0) 0x627306090abab3a6e1400e9345bc60c78a8bef57
(1) 0xf17f52151ebef6c7334fad080c5704d77216b732
(2) 0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef
(3) 0x821aea9a577a9b44299b9c15c88cf3087f3b5544
(4) 0x0d1d4e623d10f9fba5db95830f7d3839406c6af2
(5) 0x2932b7a2355d6fecc4b5c0b6bd44cc31df247a2e
(6) 0x2191ef87e392377ec08e7c08eb105ef5448eced5
(7) 0x0f4f2ac550a1b4e2280d04c21cea7ebd822934b5
(8) 0x6330a553fc93768f612722bb8c2ec78ac90b3bbc
(9) 0x5aeda56215b167893e80b4fe645ba6d5bab767de

Mnemonic: candy maple cake sugar pudding cream
honey rich smooth crumble sweet treat
```

---
```bash
truffle(develop)> migrate
Using network 'develop'.

Running migration: 1_initial_migration.js
  Deploying Migrations...
  ... 0x7c93583c9f3ffa0cc1987bb61e3f8ee6637d754ab75ae38f2666575642a35f49
  Migrations: 0x8cdaf0cd259887258bc13a92c0a6da92698644c0
Saving successful migration to network...
  ... 0xd7bc86d31bee32fa3988f1c1eabce403a1b5d570340a3a9cdba53a472ee8c956
Saving artifacts...
Running migration: 2_deploy_contracts.js
  Deploying SimpleStorage...
  ... 0x69eade814863329e2de89c05a44b138ad7571372641a0fce9159cf7fd55b72b7
  SimpleStorage: 0x345ca3e014aaf5dca488057592ee47305d9b3e10
Saving successful migration to network...
  ... 0xf36163615f41ef7ed8f4a8f192149a0bf633fe1a2398ce001bf44c43dc7bdda0
Saving artifacts...
```

---
```bash
truffle(develop)> SimpleStorage.deployed().then(
   function(instance){return instance.get.call();})
   .then(function(value){return value.toNumber()}
  );
0
```

--
```bash
truffle(develop) > SimpleStorage.deployed().then(
   function(instance){return instance.set(4);}
  );
{ tx: '0x8a7d3343dd2aaa0438157faae678ca57cc6485825bb4ed2ebefe90609dd268ce',
  receipt:
   { transactionHash: '0x8a7d3343dd2aaa0438157faae678ca57cc6485825bb4ed2ebefe90609dd268ce',
     transactionIndex: 0,
     blockHash: '0x44a5c4de36614a0a0d2d3a6f6a18f657f00456f1c5180b1d878cfcf807e6852f',
     blockNumber: 5,
     gasUsed: 41642,
     cumulativeGasUsed: 41642,
     contractAddress: null,
     logs: [] },
  logs: [] }
```

--
```bash
truffle(develop)> SimpleStorage.deployed().then(
   function(instance){return instance.get.call();})
   .then(function(value){return value.toNumber()}
  );
4
```

---
class: center, middle

# http://truffleframework.com/tutorials/pet-shop

---
class: center, middle

# https://www.stateofthedapps.com/

---
class: center, middle

# http://compiler.eth.guide
