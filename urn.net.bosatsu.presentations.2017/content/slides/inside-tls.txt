name: inverse
layout: true
class: center, middle, inverse
---
#Inside TLS

$a{res:/bosatsu/data/snippets/qualifications.txt}
---
layout: false
.left-column[
  ## Agenda
]
.right-column[
- Introduction

- Handshake

- Attacks

- Testing

- Future
]

---
name: TLS-Introduction
class: center, middle, inverse
# Introduction

---
class: center, middle

<img style="height: 500px;" src="/bosatsu/data/images/inside-tls/internet-arch-3.png">

---
class: center, middle

<img style="height: 400px;" src="/bosatsu/data/images/inside-tls/entropy-two-coins.jpg">

---
class: center, middle

<img src="/bosatsu/data/images/inside-tls/xor-table.png">

---
class: center, middle

<img src="/bosatsu/data/images/inside-tls/stream-cipher-ops.png">

---
class: center, middle

<img src="/bosatsu/data/images/inside-tls/stream-cipher.png">

---
class: center, middle

<img src="/bosatsu/data/images/inside-tls/block-cipher.png">

---
class: center, middle

<img style="height: 300px" src="/bosatsu/data/images/inside-tls/ECB_encryption.png">

---
class: center, middle

<img style="height: 300px" src="/bosatsu/data/images/inside-tls/ECB_decryption.png">

---
class: center, middle

<img style="height: 300px" src="/bosatsu/data/images/inside-tls/ecb-image.jpg">

---
class: center, middle

<img style="height: 300px" src="/bosatsu/data/images/inside-tls/Cbc_encryption.png">

---
class: center, middle

<img style="height: 300px" src="/bosatsu/data/images/inside-tls/Cbc_decryption.png">

---
class: center, middle

<img style="height: 300px" src="/bosatsu/data/images/inside-tls/OFB_encryption.png">

---
class: center, middle

<img style="height: 300px" src="/bosatsu/data/images/inside-tls/OFB_decryption.png">

---
class: center, middle

<img style="height: 300px" src="/bosatsu/data/images/inside-tls/CTR_encryption_2.png">

---
class: center, middle

<img style="height: 300px" src="/bosatsu/data/images/inside-tls/CTR_decryption_2.png">

---
class: center, middle

<img src="/bosatsu/data/images/inside-tls/symmetric-encryption.png">

---
class: center, middle

<img src="/bosatsu/data/images/inside-tls/asymmetric-encryption.png">

---
class: center, middle

<img src="/bosatsu/data/images/inside-tls/paint.png">

---
# Secure Socket Layer (SSL) 1
- Netscape initiative to bring secure connections for e-Commerce

--
- Completely internal design

--
- Lacked message integrity checks and had many of the problems of SSL 2

--
- Never really saw the light of day

---
# Secure Socket Layer (SSL) 2

- Designed at a time when Netscape didn't employ security experts

--
- Similar structure to SSL3 (i.e. handshake)

--
- Lacked certificate chaining

--
- Deployed in Netscape 1.1 in 1995

---
# Secure Socket Layer (SSL) 3

- Netscape hired security professionals and built SSL 3

--
- Released at the end of 1995

--
- First legitimate release

--
- Formed the foundation of TLS 1.0 which was released in 1999 (RFC 2246)

---
# Transport Level Security (TLS) 1.1

- Security fix release in 2006

--
- Adopted the TLS Extension mechanism

---
# Transport Level Security (TLS) 1.2

- Released in August 2008

--
- Removed hard-coded primitives for maximum flexibility

--
- Added support for authenticated encryption

---
# Transport Level Security (TLS) 1.3

- Complete Redesign

---
# Ciphersuites

- Key Exchange Algorithm

--
- Bulk Encryption Algorithm

--
- Message Authentication Code

--
- Pseudorandom function

---
class: center, middle

## [TLS Ciphersuite Registry](http://tinyurl.com/pu34ly4)

---
name: TLS-Handshake
class: center, middle, inverse
# TLS Handshake

---
class: center, middle

<img style="height: 300px;" src="/bosatsu/data/images/inside-tls/tls-record.png">

##### From "Bullet Proof SSL and TLS, Ivan Ristić, 2017."

---
```c
enum {
  change_cipher_spec (20),
  alert (21),
  handshake (22),
  application_data (23)
}
```

--
```c
struct {
  uint8 major;
  uint8 minor;
} ProtocolVersion;
```

--
```c
struct {
  ContentType type;
  ProtocolVersion version;
  uint16 length;
  opaque fragment[TLSPlaintext.length];
} TLSPlaintext;
```

---
# Handshake

1. Advertise capabilities and pick a strategy

--
2. Verify identity(ies?)

--
3. Establish master secret

--
4. Verify integrity of the exchange

---
class: center, middle

<img style="height: 500px;" src="/bosatsu/data/images/inside-tls/tls-handshake-1.png">

##### From "Bullet Proof SSL and TLS, Ivan Ristić, 2017."

---
class: center, middle

## [http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html](http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html)

---
class: center, middle

<img style="height: 500px;" src="/bosatsu/data/images/inside-tls/tls-handshake-2.png">

##### From "Bullet Proof SSL and TLS, Ivan Ristić, 2017."

---
class: center, middle

<img style="height: 500px;" src="/bosatsu/data/images/inside-tls/tls-handshake-3.png">

##### From "Bullet Proof SSL and TLS, Ivan Ristić, 2017."

---
name: TLS-Attacks
class: center, middle, inverse
# TLS Attacks

---
# Insecure Renegotiation

- Protocol issue discovered in 2009 by Marsh Ray

--
- The streams aren't necessarily connected/validated

--
- Application/Transport layer visibility

--
- Possible to trigger a renegotiation and pad the actual request via MitM attack

---
class: center, middle

<img style="height: 500px;" src="/bosatsu/data/images/inside-tls/insecure-renegotiation.png">

##### From "Bullet Proof SSL and TLS, Ivan Ristić, 2017."

---

```http
GET /index.jsp HTTP/1.0
Cookie: JSESSIONID=B3DF4B07AE33CA7DF207651CDB42136A”
```

--

```http
GET /path/to/resource.jsp HTTP/1.0
X-Ignore: GET /index.jsp HTTP/1.0
Cookie: JSESSIONID=B3DF4B07AE33CA7DF207651CDB42136A
```

--

```http
POST /statuses/update.xml HTTP/1.0
Authorization: Basic [attacker's credentials]
Content-Type: application/x-www-form-urlencoded
Content-Length: [estimated body length]

status=POST /statuses/update.xml HTTP/1.1
Authorization: Basic [victim's credentials]
```

---
# Mitigation

- Disable renegotiation

--

- Upgrade to Renegotiation Indication extension

---
class: center, middle

<img style="height: 300px" src="/bosatsu/data/images/inside-tls/Cbc_encryption.png">

---
class: center, middle

# `$$ C_2 = E(M_2 ⊕ IV_2) = E(M_2 ⊕ C_1) $$`
# `$$ C_3 = E(M_3 ⊕ IV_3) = E(M_3 ⊕ C_2) $$`

--

# `$$ M_3 = M_g ⊕ C_1 ⊕ C_2 $$`

--

# `$$ C_3 = E(M_3 ⊕ C_2) = E(M_g ⊕ C_1 ⊕ C_2 ⊕ C_2) $$`

--

# `$$ C_3 = E(M_3 ⊕ C_2) = E(M_g ⊕ C_1) $$`

--

# `$$ C_3 = E(M_g ⊕ C_1) = E(M_2 ⊕ C_1) = C_2 $$`

---
# BEAST

- Requires an active network attacker

--
- Predictable underlying content structure

--
- Victim visiting another compromised site

--
- Ability to issue arbitrary requests and control what is encrypted

--
- Java plugin installed

---
# Mitigation

- Client side solution

--
- Server side solution (disable CBC)

--
- TLS 1.1 uses a random IV per record

--
- Remove Java plugin

--
- TLS 1.2 support is fairly ubiquitous

---
# POODLE : Padding Oracle on Downgraded Legacy Encryption

--
- Described by Google in 9/2014

--
- Allows attacker to steal cookies, authorization headers, etc.

--
- Simulated network failure downgrades browsers to SSL 3.0

--
- Design flaw in SSL 3.0 and its use of CBC

---
# Mitigation

--
- Remove SSL 3.0 Support from Client and Server

--
- TLS_FALLBACK_SCSV

---
class: center, middle

<img src="/bosatsu/data/images/inside-tls/heartbleed.png">

---
class: center, middle

# [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160)

---
class: center, middle

# [http://git.openssl.org/gitweb/?p=openssl.git;a=commit;h=4817504d069b4c5082161b02a22116ad75f822b1](http://git.openssl.org/gitweb/?p=openssl.git;a=commit;h=4817504d069b4c5082161b02a22116ad75f822b1)

---
```c
struct
{
  HeartbeatMessageType type;
  uint16 payload_length;
  opaque payload[HeartbeatMessage.payload_length];
  opaque padding[padding_length];
} HeartbeatMessage;
```

--
```c
struct ssl3_record_st
{
  unsigned int length;    /* How many bytes available */
  [...]
  unsigned char *data;    /* pointer to the record data */
  [...]
} SSL3_RECORD;
```

---
```c
/* Read type and payload length first */

hbtype = *p++;
n2s(p, payload);
pl = p;
```

--
```c
/* Enter response type, length and copy payload */

**bp++ = TLS1_HB_RESPONSE;
s2n(payload, bp);
memcpy(bp, pl, payload);
```

--
```c
/* The fix */
hbtype = *p++;
n2s(p, payload);
if (1 + 2 + payload + 16 > s->s3->rrec.length)
    return 0; /* silently discard per RFC 6520 sec. 4 */
pl = p;
```

---
class: center, middle

<img src="/bosatsu/data/images/inside-tls/openssl_heartbleed_diagram.png">

##### From https://www.theregister.co.uk/2014/04/09/heartbleed_explained/


---
class: center, middle

<img src="/bosatsu/data/images/inside-tls/heartbleed-leakage.png">

##### From https://twitter.com/markloman/status/453502888447586304/photo/1

---
class: center, middle

## [http://weakdh.org](http://weakdh.org)

---
# FREAK : Factoring RSA Export Keys

- State Machine attack

--
- Due to the legacy of export controls

--
- Export version of clients

--
- MITM attack against vulnerable clients and servers

--
- Proof of concept by INRIA, Microsoft Research and IMDEA

---
# Not a Thing, Right?

--
- Modern clients don't negotiate export ciphersuites

--
- What servers still support export ciphersuites?

--
- Still requires factoring a 512-bit RSA key or factoring a 40-bit symmetric cipher

---
# FREAK Attack

--
- MITM changes standard RSA ciphersuite request to export request

--
- OpenSSL/SecureTransport bug

--
- Attacker factors the RSA modulus to recover decryption key

--
- Apache mod_ssl reuses export RSA key for the lifetime of the server

---
# Vulnerable Servers (random sample)

--
- NSA Career page

--
- GroupOn

--
- BusinessInsider

--
- tinyurl.com

--
- Kohls.com

--
- JCPenny.com

--
- zdnet.com

--
- cornell.edu

--
- lg.com

--
- motorola.com

--
- sec.gov

--
- pearson.com

---
# Vulnerable Client Libraries

--
- OpenSSL (pre-1.0.1k)

--
- BoringSSL (pre 11/10/14)

--
- LibReSSL (pre 2.1.2)

--
- SecureTransport

--
- SChannel

--
- Mono (pre 3.12.1)

--
- IBM JSSE

---
# Vulnerable Clients

--
- Safari

--
- Chrome (OSX and Android)

--
- Android browser

--
- Opera

--
- Blackberry browser

--
- All versions of Windows

---
name: TLS-Testing
class: center, middle, inverse
# TLS Testing

---
class: center, middle

## [https://wiki.mozilla.org/Security/Server_Side_TLS](https://wiki.mozilla.org/Security/Server_Side_TLS)

---
class: center, middle

## [https://github.com/jvehent/cipherscan](https://github.com/jvehent/cipherscan)

---
class: center, middle
## [https://www.ssllabs.com](https://www.ssllabs.com)

---
name: TLS-Future
class: center, middle, inverse
# TLS Future

---

# TLS 1.3 Working Draft (July 2017)

- Removes weak elliptic curves

--
- Removes compression, renegotiation, non-AEAD ciphers, static RSA and DH key exchange, Change Cipher Spec protocol

--
- Removes support for MD5 and SHA-224 hash functions

--
- Supports HKDF and semi-ephemeral DH

--
- Replaces resumption with PSK and tickets

--
- Supports 1-RTT handshakes

--
- Adds support for ChaCha20 (stream cipher) and Poly1305 (MAC), Ed25519 (signature), x25519 (key exchange)


---
class: center, middle

<img src="/bosatsu/data/images/inside-tls/bulletproof.png">




$a{res:/bosatsu/data/snippets/questions.txt}
